{"version":3,"sources":["settings/_breakpoints.scss","settings/_mixins.scss","sections/section-custom-form.scss"],"names":[],"mappings":"AAaA;AAkJA;AC/JA;ACEA;EACE;EACA;;AAEA;EAJF;IAKI;;;AAGF;EACE;EACA;;AAGF;EACE;EACA;EACA;;AAEA;EALF;IAMI;;;AAIJ;EACE;EACA;;AAEA;EAJF;IAKI;;;AAGF;EACE;EACA;EACA;EACA;;AAEA;EANF;IAOI;;;AAKN;EACE;EACA;EACA;EACA;;AAEA;EANF;IAOI;;;AAIJ;EACE;EACA;EACA;;AAGF;EACE;;AAEA;EAHF;IAII;;;AAIJ;EACE;EACA;EACA;EACA;;AAEA;EANF;IAOI;;;AAIJ;EACE;EACA;EACA;EACA;EACA;;AAEA;EAPF;IAQI;IACA;;;AAGF;EACE;;AAIJ;EACE;;AAGF;EACE;EACA;EACA;EACA;EACA;EACA;EACA;;AAEA;EATF;IAUI;;;AAGF;EACE;;AAGF;EACE;EACA;;AAIJ;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AAEA;EAdF;IAeI;;;AAGF;EACE;;AAIJ;EACE;EACA;EACA;EACA;EACA;EACA","file":"section-custom-form.css","sourcesContent":["// Breakpoints\n$grid-breakpoints: (\n\txs: 375px,\n\tsm: 576px,\n\tmd: 768px,\n\tlg: 992px,\n\txl: 1200px,\n\txxl: 1400px,\n\txxxl: 1600px,\n\tmax: 1800px\n);\n\n@use \"sass:map\";\n/* stylelint-disable */\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n\t$n: index($breakpoint-names, $name);\n\n\t@if not $n {\n\t\t@error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n\t}\n\n\t@return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n\t$min: map.get($breakpoints, $name);\n\t@return if($min !=0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n\t$max: map.get($breakpoints, $name);\n\t@return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n\t@return if(breakpoint-min($name, $breakpoints)==null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n\t$min: breakpoint-min($name, $breakpoints);\n\n\t@if $min {\n\t\t@media (min-width: $min) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\t\t@content;\n\t}\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n\t$max: breakpoint-max($name, $breakpoints);\n\n\t@if $max {\n\t\t@media (max-width: $max) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\t\t@content;\n\t}\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n\t$min: breakpoint-min($lower, $breakpoints);\n\t$max: breakpoint-max($upper, $breakpoints);\n\n\t@if $min !=null and $max !=null {\n\t\t@media (min-width: $min) and (max-width: $max) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else if $max ==null {\n\t\t@include media-breakpoint-up($lower, $breakpoints) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else if $min ==null {\n\t\t@include media-breakpoint-down($upper, $breakpoints) {\n\t\t\t@content;\n\t\t}\n\t}\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n\t$min: breakpoint-min($name, $breakpoints);\n\t$next: breakpoint-next($name, $breakpoints);\n\t$max: breakpoint-max($next, $breakpoints);\n\n\t@if $min !=null and $max !=null {\n\t\t@media (min-width: $min) and (max-width: $max) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else if $max ==null {\n\t\t@include media-breakpoint-up($name, $breakpoints) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else if $min ==null {\n\t\t@include media-breakpoint-down($next, $breakpoints) {\n\t\t\t@content;\n\t\t}\n\t}\n}\n\n/* stylelint-enable */","/*MIXINS*/\n\n@use \"sass:math\";\n\n@function rem($sizeValue: 10) {\n\t@return math.div($sizeValue, 10) + rem;\n}\n\n@mixin placeholder() {\n\t&::-webkit-input-placeholder {\n\t\t@content;\n\t}\n\n\t&:-moz-placeholder {\n\t\t@content;\n\t}\n\n\t&::-moz-placeholder {\n\t\topacity: 1;\n\t\t@content;\n\t}\n\n\t&:-ms-input-placeholder {\n\t\t@content;\n\t}\n\n\t&::-ms-input-placeholder {\n\t\t@content;\n\t}\n\n\t&:placeholder-shown {\n\t\t@content;\n\t}\n}\n\n@mixin hover() {\n\t@media (hover: hover) and (pointer: fine) {\n\t\t&:hover {\n\t\t\t@content;\n\t\t}\n\t}\n}\n","@use \"../settings/init\" as *;\n\n.custom-form {\n  background-color: var(--section-bg-color);\n  padding: rem(120) 0;\n\n  @media (max-width: 992px) {\n    padding: rem(20) 0;\n  }\n  \n  &__inner {\n    background-color: var(--inner-bg-color);\n    overflow: hidden;\n  }\n\n  &__grid {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    align-items: stretch;\n\n    @media (max-width: 992px) {\n      grid-template-columns: 1fr;\n    }\n  }\n\n  &__image-wrapper {\n    width: 100%;\n    height: 100%;\n\n    @media (max-width: 992px) {\n      max-height: rem(269);\n    }\n\n    img, .placeholder-svg {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n      display: block;\n\n      @media (max-width: 992px) {\n        max-height: rem(269);\n      }\n    }\n  }\n\n  &__content-wrapper {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: rem(60) rem(40);\n\n    @media (max-width: 992px) {\n      padding: rem(54) rem(25);\n    }\n  }\n\n  &__content {\n    max-width: rem(568);\n    width: 100%;\n    text-align: center;\n  }\n\n  &__header {\n    margin-bottom: rem(72) !important;\n\n    @media (max-width: 992px) {\n      margin-bottom: rem(36) !important;\n    }\n  }\n\n  &__heading {\n    font-size: rem(72) !important;\n    font-weight: 400;\n    line-height: 1.2;\n    margin-bottom: rem(24);\n\n    @media (max-width: 992px) {\n      font-size: rem(32) !important;\n    }\n  }\n\n  &__description {\n    font-size: rem(18) !important; \n    line-height: 1.6;\n    max-width: rem(328);\n    margin-left: auto;\n    margin-right: auto;\n\n    @media (max-width: 992px) {\n      font-size: rem(14) !important;\n      max-width: rem(268);\n    }\n\n    p {\n      margin: 0;\n    }\n  }\n\n  &__field {\n    margin-bottom: rem(20);\n  }\n\n  &__input {\n    width: 100%;\n    padding: rem(16) rem(24);\n    border: 1px solid var(--color-midnight-blue);\n    border-radius: rem(40);\n    background-color: transparent;\n    font-size: rem(16);\n    text-align: left;\n\n    @media (max-width: 992px) {\n      font-size: rem(14) !important;\n    }\n\n    &::placeholder {\n      color: #918f8b;\n    }\n\n    &:focus {\n      outline: none;\n      border-color: var(--color-midnight-blue);\n    }\n  }\n  \n  &__button {\n    width: 100%;\n    background-color: var(--btn-bg-color);\n    color: var(--btn-text-color);\n    padding: rem(18) rem(40);\n    border: none;\n    border-radius: rem(40);\n    text-decoration: none;\n    font-size: rem(18);\n    font-weight: 300;\n    cursor: pointer;\n    transition: opacity 0.2s ease;\n    margin-top: rem(12);\n\n    @media (max-width: 992px) {\n      font-size: rem(14.4) !important;\n    }\n\n    &:hover {\n      opacity: 0.85;\n    }\n  }\n\n  &__success-message {\n    padding: rem(16);\n    margin-bottom: rem(24);\n    border: 1px solid green;\n    background-color: #f0fff0;\n    color: green;\n    border-radius: rem(8);\n  }\n}\n"]}