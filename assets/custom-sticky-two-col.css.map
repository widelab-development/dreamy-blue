{"version":3,"sources":["settings/_breakpoints.scss","settings/_mixins.scss","sections/custom-sticky-two-col.scss"],"names":[],"mappings":"AAaA;AAkJA;AC/JA;ACIE;EACE;EACA;;AAGF;EACE;EACA;EACA;EACA;EACA;;AAGF;EACE;IACE;IACA;IACA;IACA;;;AAIJ;EACE;;AAIF;EACE;IACE;IACA;;EAGF;IACE;IACA;IACA;IACA;;EAGF;IACE;;EAGF;IACE;;;AAIJ;EACE;EACA;EACA;;AAEA;EACE;EACA;;AAGF;EACE;EACA;;AAGF;EACE;IACE;IACA;;EAGF;IACE;IACA;;;AAKN;EACE;EACA;;AAGF;EACE;EACA;EACA;;AAGF;EACE;IACE;IACA;IACA;;EAGF;IACE;IACA;;;AAIJ;EACE;;AAGF;EACE;;;AAKJ;EAGI;IACE;;EAGF;IACE;IACA;;EAGF;IACE;;EAGF;IACE;IACA;;EAGF;IACE;IACA;IACA;;EAGF;IACE;IACA;;EAGF;IACE;;EAGF;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EAGF;IACE;;EAGF;IACE;IACA","file":"custom-sticky-two-col.css","sourcesContent":["// Breakpoints\r\n$grid-breakpoints: (\r\n\txs: 375px,\r\n\tsm: 576px,\r\n\tmd: 768px,\r\n\tlg: 992px,\r\n\txl: 1200px,\r\n\txxl: 1400px,\r\n\txxxl: 1600px,\r\n\tmax: 1800px\r\n);\r\n\r\n@use \"sass:map\";\r\n/* stylelint-disable */\r\n\r\n// Breakpoint viewport sizes and media queries.\r\n//\r\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\r\n//\r\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\r\n//\r\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\r\n\r\n// Name of the next breakpoint, or null for the last breakpoint.\r\n//\r\n//    >> breakpoint-next(sm)\r\n//    md\r\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\r\n//    md\r\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\r\n//    md\r\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\r\n\t$n: index($breakpoint-names, $name);\r\n\r\n\t@if not $n {\r\n\t\t@error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\r\n\t}\r\n\r\n\t@return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\r\n}\r\n\r\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\r\n//\r\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\r\n//    576px\r\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\r\n\t$min: map.get($breakpoints, $name);\r\n\t@return if($min !=0, $min, null);\r\n}\r\n\r\n// Maximum breakpoint width.\r\n// The maximum value is reduced by 0.02px to work around the limitations of\r\n// `min-` and `max-` prefixes and viewports with fractional widths.\r\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\r\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\r\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\r\n//\r\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\r\n//    767.98px\r\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\r\n\t$max: map.get($breakpoints, $name);\r\n\t@return if($max and $max > 0, $max - .02, null);\r\n}\r\n\r\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\r\n// Useful for making responsive utilities.\r\n//\r\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\r\n//    \"\"  (Returns a blank string)\r\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\r\n//    \"-sm\"\r\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\r\n\t@return if(breakpoint-min($name, $breakpoints)==null, \"\", \"-#{$name}\");\r\n}\r\n\r\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\r\n// Makes the @content apply to the given breakpoint and wider.\r\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\r\n\t$min: breakpoint-min($name, $breakpoints);\r\n\r\n\t@if $min {\r\n\t\t@media (min-width: $min) {\r\n\t\t\t@content;\r\n\t\t}\r\n\t}\r\n\r\n\t@else {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\r\n// Makes the @content apply to the given breakpoint and narrower.\r\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\r\n\t$max: breakpoint-max($name, $breakpoints);\r\n\r\n\t@if $max {\r\n\t\t@media (max-width: $max) {\r\n\t\t\t@content;\r\n\t\t}\r\n\t}\r\n\r\n\t@else {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n// Media that spans multiple breakpoint widths.\r\n// Makes the @content apply between the min and max breakpoints\r\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\r\n\t$min: breakpoint-min($lower, $breakpoints);\r\n\t$max: breakpoint-max($upper, $breakpoints);\r\n\r\n\t@if $min !=null and $max !=null {\r\n\t\t@media (min-width: $min) and (max-width: $max) {\r\n\t\t\t@content;\r\n\t\t}\r\n\t}\r\n\r\n\t@else if $max ==null {\r\n\t\t@include media-breakpoint-up($lower, $breakpoints) {\r\n\t\t\t@content;\r\n\t\t}\r\n\t}\r\n\r\n\t@else if $min ==null {\r\n\t\t@include media-breakpoint-down($upper, $breakpoints) {\r\n\t\t\t@content;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Media between the breakpoint's minimum and maximum widths.\r\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\r\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\r\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\r\n\t$min: breakpoint-min($name, $breakpoints);\r\n\t$next: breakpoint-next($name, $breakpoints);\r\n\t$max: breakpoint-max($next, $breakpoints);\r\n\r\n\t@if $min !=null and $max !=null {\r\n\t\t@media (min-width: $min) and (max-width: $max) {\r\n\t\t\t@content;\r\n\t\t}\r\n\t}\r\n\r\n\t@else if $max ==null {\r\n\t\t@include media-breakpoint-up($name, $breakpoints) {\r\n\t\t\t@content;\r\n\t\t}\r\n\t}\r\n\r\n\t@else if $min ==null {\r\n\t\t@include media-breakpoint-down($next, $breakpoints) {\r\n\t\t\t@content;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/* stylelint-enable */","/*MIXINS*/\r\n\r\n@use \"sass:math\";\r\n\r\n@function rem($sizeValue: 10) {\r\n\t@return math.div($sizeValue, 10) + rem;\r\n}\r\n\r\n@mixin placeholder() {\r\n\t&::-webkit-input-placeholder {\r\n\t\t@content;\r\n\t}\r\n\r\n\t&:-moz-placeholder {\r\n\t\t@content;\r\n\t}\r\n\r\n\t&::-moz-placeholder {\r\n\t\topacity: 1;\r\n\t\t@content;\r\n\t}\r\n\r\n\t&:-ms-input-placeholder {\r\n\t\t@content;\r\n\t}\r\n\r\n\t&::-ms-input-placeholder {\r\n\t\t@content;\r\n\t}\r\n\r\n\t&:placeholder-shown {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n@mixin hover() {\r\n\t@media (hover: hover) and (pointer: fine) {\r\n\t\t&:hover {\r\n\t\t\t@content;\r\n\t\t}\r\n\t}\r\n}\r\n","@use \"../settings/init\" as *;\r\n\r\n.custom-sticky-two-col {\r\n\r\n  &__container {\r\n    background: var(--color-midnight-blue);\r\n    color: var(--color-white);\r\n  }\r\n\r\n  &__row {\r\n    display: flex;\r\n    gap: rem(36);\r\n    margin: auto;\r\n    padding: rem(36) 0;\r\n    flex-direction: column;\r\n  }\r\n\r\n  @media (min-width: 769px) {\r\n    &__row {\r\n      gap: rem(24);\r\n      padding: rem(120) 0;\r\n      flex-direction: row;\r\n      max-width: rem(1158);\r\n    }\r\n  }\r\n\r\n  &__left {\r\n    flex: 1;\r\n\r\n  }\r\n\r\n  @media (min-width: 769px) {\r\n    &__inner {\r\n      position: sticky;\r\n      top: rem(80);\r\n    }\r\n\r\n    &__right {\r\n      flex: 1;\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: rem(72);\r\n    }\r\n\r\n    &__block {\r\n      max-width: rem(500);\r\n    }\r\n\r\n    &__block img {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  &__heading {\r\n    color: var(--title-color);\r\n    margin: 0;\r\n    margin-bottom: rem(40);\r\n\r\n    &.h2 {\r\n      font-size: rem(42);\r\n      line-height: 1;\r\n    }\r\n\r\n    &.h1 {\r\n      font-size: rem(42);\r\n      line-height: 1;\r\n    }\r\n\r\n    @media (min-width: 769px) {\r\n      &.h2 {\r\n        font-size: rem(72);\r\n        line-height: 1;\r\n      }\r\n\r\n      &.h1 {\r\n        font-size: rem(96);\r\n        line-height: 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  &__eyebrow {\r\n    font-size: rem(14);\r\n    margin-bottom: rem(12);\r\n  }\r\n\r\n  h3.custom-sticky-two-col__block-title {\r\n    font-size: rem(26);\r\n    line-height: 1.1;\r\n    margin: rem(18) 0 rem(4);\r\n  }\r\n\r\n  @media (min-width: 769px) {\r\n    h3.custom-sticky-two-col__block-title {\r\n      font-size: rem(32);\r\n      line-height: 1.2;\r\n      margin: rem(24) 0;\r\n    }\r\n\r\n    &__eyebrow {\r\n      font-size: rem(18);\r\n      margin-bottom: rem(23);\r\n    }\r\n  }\r\n\r\n  &__right--mobile {\r\n    display: none;\r\n  }\r\n\r\n  &__right--desktop {\r\n    display: flex;\r\n  }\r\n\r\n}\r\n\r\n@media (max-width: 768px) {\r\n\r\n  .custom-sticky-two-col {\r\n    &__right--mobile {\r\n      display: block;\r\n    }\r\n\r\n    &__block img {\r\n      aspect-ratio: 286/200;\r\n      object-fit: cover;\r\n    }\r\n\r\n    &__right--desktop {\r\n      display: none;\r\n    }\r\n\r\n    .splide__track {\r\n      margin-bottom: rem(36);\r\n      overflow: visible;\r\n    }\r\n\r\n    .splide__arrow svg {\r\n      fill: transparent;\r\n      height: rem(40);\r\n      width: rem(40);\r\n    }\r\n\r\n    .splide__arrows {\r\n      display: flex;\r\n      gap: rem(12)\r\n    }\r\n\r\n    .splide__slide {\r\n      width: clamp(286px, 75vw, 400px);\r\n    }\r\n\r\n    .splide__arrow {\r\n      -ms-flex-align: center;\r\n      align-items: center;\r\n      background: transparent;\r\n      border: 0;\r\n      border-radius: 50%;\r\n      cursor: pointer;\r\n      height: rem(40);\r\n      -ms-flex-pack: center;\r\n      justify-content: center;\r\n      opacity: .7;\r\n      padding: 0;\r\n      position: relative;\r\n      top: 0;\r\n      transform: translateY(0);\r\n      width: rem(40);\r\n      z-index: 1;\r\n    }\r\n\r\n    .splide__arrow--prev {\r\n      left: 0;\r\n    }\r\n\r\n    .splide__arrow--next {\r\n      right: auto;\r\n      left: auto;\r\n    }\r\n\r\n  }\r\n}"]}